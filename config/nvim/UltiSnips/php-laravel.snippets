global !p
def namespace():
    namespace = ''
    for entry in path.split('/'):
        if entry != fn:
            namespace += capitalize(entry) + '\\'
    return namespace.rstrip('\\')

def convertToSnakeCase(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

def convertToSingular(name):
    l4 = name[-4:]
    l3 = name[-3:]
    l1 = name[-1:]
    if l4 == 'sses':
        result = name[:-3]
    elif l3 == 'ies':
        result = name[:-3] + 'y'
    elif l3 == 'xes':
        result = name[:-3] + 'x'
    elif l1 == 's':
        result = name[:-1]
    else:
        result = name
    return result

def convertToPlural(name):
    l1 = name[-1:]
    if l1 == 'y':
        result = name.rstrip(l1) + 'ies'
    elif l1 == 's' or l1 == 'x':
        result = name + 'es'
    else:
        result = name + 's'
    return result

def capitalize(name):
    return name[:1].upper() + name[1:]

def decapitalize(name):
    return name[:1].lower() + name[1:]
endglobal

snippet model "Laravel model" b
<?php

namespace `!p snip.rv = namespace()`;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class ${1:`!p snip.rv = snip.basename`} extends Model
{
    use ${2:SoftDeletes};

    
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['$3'];

    /**
     * The attributes excluded from the model's JSON form.
     *
     * @var array
     */
    protected $hidden = ['$4'];

    /**
     * The attributes that should be mutated to dates.
     *
     * @var array
     */
    protected $dates = ['${5:deleted_at}'];

    ${6://...}
}
endsnippet

snippet schema:table "Laravel migration - Schema 'table'" b
Schema::table('${1:items}', function (Blueprint $table) {
    ${2://...}
});
endsnippet

snippet l_mfk "Laravel migration - foreign key" b
$table->integer('${1:relation}_id')->${2:required}()->unsigned();
$table->foreign('$1_id')->references('id')->on('`!p snip.rv = convertToSnakeCase(convertToPlural(t[1])) `');
endsnippet

snippet l_mdrop "Laravel migration - drop table and ignore foreign keys" b
DB::statement('SET FOREIGN_KEY_CHECKS = 0');
Schema::dropIfExists('$1');
DB::statement('SET FOREIGN_KEY_CHECKS = 1');
endsnippet

snippet TestCase "Laravel TestCase class" b
<?php

class `!p snip.rv = capitalize(snip.basename)` extends TestCase
{
    ${1://...}
}
endsnippet

snippet test "Laravel test method" b
/** @test */
public function ${1:a_test_is_getting_executed}()
{
    $2
}
endsnippet

snippet belongsTo "one2many belongsTo" b
/**
 * `!p snip.rv = capitalize(snip.basename)` belongs to `!p snip.rv = capitalize(t[1])`.
 *
 * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
 */
public function ${1:item}()
{
    // belongsTo(RelatedModel, foreignKey = `!p snip.rv = convertToSnakeCase(t[1])`_id, keyOnRelatedModel = id)
    return $this->belongsTo(`!p snip.rv = capitalize(t[1])`::class$2);
}
endsnippet

snippet hasOne "one2one hasOne" b
/**
 * `!p snip.rv = capitalize(snip.basename)` has one `!p snip.rv = capitalize(t[1])`.
 *
 * @return \Illuminate\Database\Eloquent\Relations\HasOne
 */
public function ${1:item}()
{
    // hasOne(RelatedModel, foreignKeyOnRelatedModel = `!p snip.rv = convertToSnakeCase(snip.basename)`_id, localKey = id)
    return $this->hasOne(`!p snip.rv = capitalize(t[1])`::class$2);
}
endsnippet

snippet hasMany "one2many hasMany" b
/**
 * `!p snip.rv = capitalize(snip.basename)` has many `!p snip.rv = capitalize(t[1])`.
 *
 * @return \Illuminate\Database\Eloquent\Relations\HasMany
 */
public function ${1:items}()
{
    // hasMany(RelatedModel, foreignKeyOnRelatedModel = `!p snip.rv = convertToSnakeCase(snip.basename)`_id, localKey = id)
    return $this->hasMany(`!p snip.rv = convertToSingular(capitalize(t[1]))`::class$2);
}
endsnippet

snippet belongsToMany "many2many belongsToMany" b
/**
 * Property belongs to many (many-to-many) `!p snip.rv = convertToSingular(capitalize(t[1]))`.
 *
 * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
 */
public function ${1:items}()
{
    // belongsToMany(RelatedModel, pivotTable, thisKeyOnPivot = `!p snip.rv = convertToSnakeCase(snip.basename)`_id, otherKeyOnPivot = `!p snip.rv = convertToSingular(convertToSnakeCase(t[1]))`_id)
    return $this->belongsToMany(`!p snip.rv = convertToSingular(capitalize(t[1]))`::class$2);
}
endsnippet

snippet morphOne "one2one polymorphic relationship" b
/**
 * `!p snip.rv = capitalize(snip.basename)` morphs one `!p snip.rv = capitalize(t[1])`.
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphOne
 */
public function ${1:address}()
{
    // morphMany(MorphedModel, morphableName, type = `!p snip.rv = convertToSnakeCase(t[1])`able_type, relatedKeyName = `!p snip.rv = convertToSnakeCase(t[1])`able_id, localKey = id)
    return $this->morphOne(`!p snip.rv = capitalize(t[1])`::class, '`!p snip.rv = convertToSnakeCase(t[1])`able');
}
endsnippet

snippet morphMany "one2many polymorphic relationship" b
/**
 * `!p snip.rv = capitalize(snip.basename)` morphs many `!p snip.rv = capitalize(t[1])`.
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphMany
 */
public function ${1:images}()
{
    // morphMany(MorphedModel, morphableName, type = `!p snip.rv = convertToSingular(convertToSnakeCase(t[1]))`able_type, relatedKeyName = `!p snip.rv = convertToSingular(convertToSnakeCase(t[1]))`able_id, localKey = id)
    return $this->morphMany(`!p snip.rv = capitalize(convertToSingular(t[1]))`::class, '`!p snip.rv = convertToSingular(convertToSnakeCase(t[1]))`able');
}
endsnippet

snippet morphTo "morphable model" b
/**
 * `!p snip.rv = capitalize(snip.basename)` morphs to models in `!p snip.rv = convertToSnakeCase(t[1])`able_type.
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphTo
 */
public function ${1:`!p snip.rv = decapitalize(snip.basename)`}able()
{
    // morphTo($name = `!p snip.rv = convertToSnakeCase(t[1])`able, $type = `!p snip.rv = convertToSnakeCase(t[1])`able_type, $id = `!p snip.rv = convertToSnakeCase(t[1])`able_id)
    // requires `!p snip.rv = convertToSnakeCase(t[1])`able_type and `!p snip.rv = convertToSnakeCase(t[1])`able_id fields on $this->table
    return $this->morphTo($2);
}
endsnippet

snippet testRelationBelongsTo "Laravel test case - tests eloquent model belongsTo relation" b
/**
 * this method tests the
 * BelongsTo relation between this Model (`!p snip.rv = capitalize(t[2])`)
 * and the `!p snip.rv = capitalize(t[1])` Eloquent model
 * 1 -> ${1:author} (foreign model)
 * 2 -> ${2:book} (current model)
 */
public function testRelationTo`!p snip.rv = capitalize(t[1])`Model()
{
    \$`!p snip.rv = capitalize(t[2])` = new `!p snip.rv = capitalize(t[2])`;

    \$msg = 'wrong relationship type --- $1 relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->$1() instanceof BelongsTo, \$msg);

    \$msg = 'wrong relationship model --- $1 relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->$1()->getModel() instanceof `!p snip.rv = capitalize(t[1])`, \$msg);

    \$key = explode('.', \$`!p snip.rv = capitalize(t[2])`->$1()->getQualifiedForeignKeyName());

    \$msg = 'wrong foreign table --- $1 relation';
    \$this->assertTrue(\$key[0] === '`!p snip.rv = convertToSnakeCase(convertToPlural(t[2])) `', $msg);

    \$msg = 'wrong foreign key --- $1 relation';
    \$this->assertTrue(\$key[1] === '`!p snip.rv = convertToSnakeCase(t[1]) `_id', \$msg);
}
endsnippet

snippet testRelationHasOne "Laravel test case - tests eloquent model hasOne relation" b
/**
 * this method tests the
 * HasOne relation between this Model (`!p snip.rv = capitalize(t[2])`)
 * and the `!p snip.rv = capitalize(t[1])` Eloquent model
 * 1 -> ${1:cart} (foreign model)
 * 2 -> ${2:customer} (current model)
 */
public function testRelationTo`!p snip.rv = capitalize(t[1])`Model()
{
    \$`!p snip.rv = capitalize(t[2])` = new `!p snip.rv = capitalize(t[2])`;

    \$msg = 'wrong relationship type --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`() instanceof HasOne, \$msg);

    \$msg = 'wrong relationship model --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getModel() instanceof `!p snip.rv = capitalize(t[1])`, \$msg);

    \$key = explode('.', \$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getQualifiedForeignKeyName());

    \$msg = 'wrong foreign table --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$key[0] === '`!p snip.rv = convertToSnakeCase(convertToPlural(t[1]))`', $msg);

    \$msg = 'wrong foreign key --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$key[1] === '`!p snip.rv = convertToSnakeCase(t[2]) `_id', \$msg);
}
endsnippet

snippet testRelationHasMany "Laravel test case - tests eloquent model hasMany relation" b
/**
 * this method tests the
 * HasMany relation between this Model (`!p snip.rv = capitalize(t[2])`)
 * and the `!p snip.rv = convertToSingular(capitalize(t[1]))` Eloquent model
 * 1 -> ${1:books} (foreign model - plural)
 * 2 -> ${2:author} (current model - singular)
 */
public function testRelationTo`!p snip.rv = convertToSingular(capitalize(t[1]))`Model()
{
    \$`!p snip.rv = capitalize(t[2])` = new `!p snip.rv = capitalize(t[2])`;

    \$msg = 'wrong relationship type --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`() instanceof HasMany, \$msg);

    \$msg = 'wrong relationship model --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getModel() instanceof `!p snip.rv = convertToSingular(capitalize(t[1]))`, \$msg);

    \$key = explode('.', \$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getQualifiedForeignKeyName());

    \$msg = 'wrong foreign table --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$key[0] === '`!p snip.rv = convertToSnakeCase(t[1])`', $msg);

    \$msg = 'wrong foreign key --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$key[1] === '`!p snip.rv = convertToSnakeCase(t[2]) `_id', \$msg);
}
endsnippet

snippet testRelationBelongsToMany "Laravel test case - tests eloquent model belongsToMany relation" b
`!p
def generatePivotTable(foreignName, currentName):
    names = [foreignName, currentName]
    return min(names) + '_' + max(names)
`
/**
 * this method tests the
 * BelongsToMany relation between this Model (`!p snip.rv = capitalize(t[2])`)
 * and the `!p snip.rv = convertToSingular(capitalize(t[1]))` Eloquent model
 * 1 -> ${1:roles} (foreign model - plural)
 * 2 -> ${2:user} (current model - singular)
 */
public function testRelationTo`!p snip.rv = convertToSingular(capitalize(t[1]))`Model()
{
    \$`!p snip.rv = capitalize(t[2])` = new `!p snip.rv = capitalize(t[2])`;

    \$msg = 'wrong relationship type --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`() instanceof BelongsToMany, \$msg);

    \$msg = 'wrong relationship model --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getModel() instanceof `!p snip.rv = convertToSingular(capitalize(t[1]))`, \$msg);

    \$msg = 'wrong foreign table --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getTable() === '`!p snip.rv = generatePivotTable(convertToSnakeCase(convertToSingular(t[1])), convertToSnakeCase(t[2])) `', \$msg);

    \$fpk = \$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getQualifiedForeignPivotKeyName();
    \$fid = \$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getTable() . '.`!p snip.rv = convertToSnakeCase(t[2])`_id';
    \$msg = 'wrong foreign key in pivot table --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$fpk === \$fid, \$msg);

    \$rpk = \$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getQualifiedRelatedPivotKeyName();
    \$rid = \$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getTable() . '.`!p snip.rv = convertToSnakeCase(convertToSingular(t[1]))`_id';
    \$msg = 'wrong related key in pivot table --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$rpk === \$rid, \$msg);
}
endsnippet

snippet testRelationMorphOne "Laravel test case - tests eloquent model morphOne relation" b
/**
 * this method tests the
 * MorphOne relation between this Model (`!p snip.rv = capitalize(t[2])`)
 * and the `!p snip.rv = capitalize(t[1])` Eloquent model
 * 1 -> ${1:address} (foreign model)
 * 2 -> ${2:user} (current model)
 */
public function testRelationTo`!p snip.rv = capitalize(t[1])`Model()
{
    \$`!p snip.rv = capitalize(t[2])` = new `!p snip.rv = capitalize(t[2])`;

    \$msg = 'wrong relationship type --- $1 relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->$1() instanceof MorphOne, \$msg);

    \$msg = 'wrong relationship model --- $1 relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->$1()->getModel() instanceof `!p snip.rv = capitalize(t[1])`, \$msg);

    \$msg = 'wrong morph class --- $1 relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->$1()->getMorphClass() === `!p snip.rv = capitalize(t[2])`::class);

    \$morphType = explode('.', \$`!p snip.rv = capitalize(t[2])`->$1()->getQualifiedMorphType());

    \$msg = 'wrong foreign table --- $1 relation';
    \$this->assertTrue(\$morphType[0] === '`!p snip.rv = convertToSnakeCase(convertToPlural(t[1]))`', \$msg);

    \$msg = 'wrong morph type --- $1 relation';
    \$this->assertTrue(\$morphType[1] === '`!p snip.rv = convertToSnakeCase(t[1])`able_type', \$msg);

    \$msg = 'wrong morph id --- $1 relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->$1()->getForeignKeyName() === '`!p snip.rv = convertToSnakeCase(t[1])`able_id', \$msg);
}
endsnippet

snippet testRelationMorphMany "Laravel test case - tests eloquent model morphMany relation" b
/**
 * this method tests the
 * MorphMany relation between this Model (`!p snip.rv = capitalize(t[2])`)
 * and the `!p snip.rv = capitalize(t[1])` Eloquent model
 * 1 -> ${1:images} (foreign model - plural)
 * 2 -> ${2:user} (current model - singular)
 */
public function testRelationTo`!p snip.rv = convertToSingular(capitalize(t[1]))`Model()
{
    \$`!p snip.rv = capitalize(t[2])` = new `!p snip.rv = capitalize(t[2])`;

    \$msg = 'wrong relationship type --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`() instanceof MorphMany, \$msg);

    \$msg = 'wrong relationship model --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getModel() instanceof `!p snip.rv = convertToSingular(capitalize(t[1]))`, \$msg);

    \$msg = 'wrong morph class --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getMorphClass() === `!p snip.rv = capitalize(t[2])`::class);

    \$morphType = explode('.', \$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getQualifiedMorphType());

    \$msg = 'wrong foreign table --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$morphType[0] === '`!p snip.rv = convertToSnakeCase(t[1])`', \$msg);

    \$msg = 'wrong morph type --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$morphType[1] === '`!p snip.rv = convertToSingular(convertToSnakeCase(t[1]))`able_type', \$msg);

    \$msg = 'wrong morph id --- `!p snip.rv = t[1]` relation';
    \$this->assertTrue(\$`!p snip.rv = capitalize(t[2])`->`!p snip.rv = t[1]`()->getForeignKeyName() === '`!p snip.rv = convertToSingular(convertToSnakeCase(t[1]))`able_id', \$msg);
}
endsnippet

snippet testRelationMorphTo "Laravel test case - tests eloquent model morphTo relation" b
/**
 * this method tests the
 * MorphTo relation
 * 1 -> ${1:image}
 */
public function testRelationTo`!p snip.rv = capitalize(t[1])`ableModel()
{
    \$`!p snip.rv = capitalize(t[1])` = new `!p snip.rv = capitalize(t[1])`;

    $msg = 'wrong relationship type --- $1able relation';
    $this->assertTrue($`!p snip.rv = capitalize(t[1])`->$1able() instanceof MorphTo, $msg);

    $key = $`!p snip.rv = capitalize(t[1])`->$1able()->getForeignKeyName();
    $type = $`!p snip.rv = capitalize(t[1])`->$1able()->getMorphType();

    $msg = 'wrong foreign key field name --- $1able relation';
    $this->assertTrue($key === '`!p snip.rv = convertToSnakeCase(t[1])`able_id', $msg);

    $msg = 'wrong morph type field name --- $1able relation';
    $this->assertTrue($type === '`!p snip.rv = convertToSnakeCase(t[1])`able_type', $msg);
}
endsnippet

snippet seeder "Laravel database seeder class" b
<?php

use Illuminate\Database\Seeder;

class ${2:`!p snip.rv = snip.basename`} extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $1
    }
}
endsnippet

snippet gqlType "Rebing/GraphQL - Type" b
<?php

namespace `!p snip.rv = namespace()`;

use GraphQL;
use GraphQL\Type\Definition\Type;
use Rebing\GraphQL\Support\Type as BaseType;

class ${1:`!p snip.rv = snip.basename`} extends BaseType
{
    protected $attributes = [
        'name' => '$1',
    ];

    public function fields(): array
    {
        return [
            'id' => [
                'type' => Type::nonNull(Type::int()),
            ],
            'name' => [
                'type' => Type::string(),
            ],
            ${2://...}
        ];
    }
}
endsnippet

snippet gqlQuery "Rebing/GraphQL - Query" b
<?php

namespace `!p snip.rv = namespace()`;

use Rebing\GraphQL\Support\Query;
use GraphQL\Type\Definition\ResolveInfo;
use GraphQL\Type\Definition\Type;
use GraphQL;

class ${1:`!p snip.rv = snip.basename`} extends Query
{
    protected $attributes = [
        'name' => '$1',
    ];

    public function type(): Type
    {
        return GraphQL::type('$1');
    }

    public function args(): array
    {
        return [
            'id' => [
                'name' => 'id',
                'type' => Type::int(),
            ],
        ];
    }

    public function resolve($root, $args, $context, ResolveInfo $info)
    {
        $fields = $info->getFieldSelection($depth = 3);

        $`!p snip.rv = convertToPlural(t[1])` = \\App\\Models\\$1::query();

        if (isset($args['id'])) {
            $`!p snip.rv = convertToPlural(t[1])`->where('id', $args['id']);
            if ($$1 = $`!p snip.rv = convertToPlural(t[1])`->first()) {
                return $$1;
            }
            return abort(404, 'Not Found');
        }
        return abort(403, 'Required argument "ID" was not provided!');
    }
}
endsnippet
