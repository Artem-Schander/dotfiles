
# Start a minimal app

snippet ex-app
	var express = require('express');
	var app     = express();
	app.get('/', function(req, res){
		  res.send('hello');
	});
	app.set('port', process.env.PORT || 3000);
	var server = app.listen(app.get('port'), function() {
	  debug('Express server listening on port ' + server.address().port);
	});


# Route methods

snippet app-get
	app.get('/${1}', function(req, res){
		  res.json({ msg: 'hello' });
	});

snippet app-all
	app.all('/${1:secret}', function (req, res, next) {
	  console.log('Accessing the secret section ...');
	  next(); // pass control to the next handler
	  ${2}
	});

# Router
snippet app-get
	router.get('/${1}', function(req, res) {
			res.json({ message: 'hello' });
	});

snippet app-post
	app.post('/', function (req, res) {
	  res.send('POST request to the homepage');
	});

snippet app-callbacks
	app.get('/${1:example/slug}', [cb0, cb1, cb2]);

snippet app-route
	app.route('/${1:entity}')
	  .get(function(req, res) {
		res.send('Get a random entity');
	  })
	  .post(function(req, res) {
		res.send('Add an entity');
	  })
	  .put(function(req, res) {
		res.send('Update the entity');
	  });


# Route define

snippet router-get
	router.route('/${1:entities}')
		.get(function(req, res) {
			res.json({ message: 'Entity info' });
		});


snippet router-crud
	router.route('/${1:entity}/:${2:entity_id}')
		.get(function(req, res) {
			res.json({ message: 'Showing' });
		})
		.put(function(req, res) {
			res.json({ message: 'Updated' });
		})
		.post(function(req, res) {
			res.json({ message: 'Created' });
		})
		.delete(function(req, res) {
			res.json({ message: 'Deleted' });
		});

# A middleware sub-stack shows request info for any type of HTTP request to /user/:id

snippet router-use
	router.use('/${1:user}/:${2:id}', function(req, res, next) {
		console.log('Request URL:', req.originalUrl);
		next();
	}, function (req, res, next) {
		console.log('Request Type:', req.method);
		next();
	});


# Router middleware

# a middleware mounted on /user/:id; will be executed for any type of HTTP request to /user/:id

snippet app-use
	app.use('/${1:user}/:${2:id}', function (req, res, next) {
	  console.log('Request Type:', req.method);
	  next();
	});

# a middleware sub-stack which prints request info for any type of HTTP request to /user/:id

snippet app-use-next
	app.use('/${1:user}/:${2:id}', function(req, res, next) {
	  console.log('Request URL:', req.originalUrl);
	  next();
	}, function (req, res, next) {
	  console.log('Request Type:', req.method);
	  next();
	});

snippet app-engine
	app.engine('html', require('ejs').renderFile);

snippet app-engine-hbs
	var exphbs = require('express-handlebars');
	app.engine('.hbs', exphbs({defaultLayout: 'single', extname: '.hbs'}));
	app.set('view engine', '.hbs');

snippet app-engine-all
	var engines = require('consolidate');
	app.engine('haml', engines.haml);
	app.engine('html', engines.hogan);

snippet app-use-static
	app.use(express.static('public', ${1:options}));


snippet app-use-error
	app.use(function(err, req, res, next) {
	  console.error(err.stack);
	  res.status(500).send('Something broke!');
	});


# handlebars

snippet hb-helper
	var hbs = exphbs.create({
		// Specify helpers which are only registered on this instance.
		helpers: {
			foo: function () { return 'FOO!'; },
			${1:bar}: function () { ${2} }
		}
	});





