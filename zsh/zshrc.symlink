export DOTFILES=$HOME/.dotfiles
export ZSH=$DOTFILES/zsh/.oh-my-zsh

command_exists() {
    type "$1" > /dev/null 2>&1
}

# PHP
SPACESHIP_PHP_PREFIX=""
SPACESHIP_PHP_SUFFIX=" "
SPACESHIP_PHP_SYMBOL=" " # "\ue608"

# PYTHON
SPACESHIP_PYENV_PREFIX=""
SPACESHIP_PYENV_SUFFIX=" "
SPACESHIP_PYENV_SYMBOL=" " # "\ue606"

# NODE
SPACESHIP_NODE_PREFIX=""
SPACESHIP_NODE_SUFFIX=" "
SPACESHIP_NODE_SYMBOL=" " # "\uf898"

# RUBY
SPACESHIP_RUBY_PREFIX=""
SPACESHIP_RUBY_SUFFIX=" "
SPACESHIP_RUBY_SYMBOL=" " # "\ue791"

# DOCKER
SPACESHIP_DOCKER_PREFIX=""
SPACESHIP_DOCKER_SUFFIX=" "
SPACESHIP_DOCKER_SYMBOL=" " # "\uf308"

# GIT
# change git symbol
SPACESHIP_GIT_SYMBOL="\uf402 " #  
# remove git prefix
SPACESHIP_GIT_PREFIX=""
# Wrap git status to `[...]`
SPACESHIP_GIT_STATUS_PREFIX=" [ "
SPACESHIP_GIT_STATUS_SUFFIX="]"
# SPACESHIP_GIT_STATUS_COLOR="white"

SPACESHIP_GIT_STATUS_UNTRACKED=" " # "\uf7d5 " # ?
SPACESHIP_GIT_STATUS_ADDED="樂" # "\uf914" # +
SPACESHIP_GIT_STATUS_MODIFIED=" " # "\uf704 " # !
SPACESHIP_GIT_STATUS_RENAMED=" " # "\uf553 " # »
SPACESHIP_GIT_STATUS_DELETED=" " # "\uf655 " # ✘
SPACESHIP_GIT_STATUS_STASHED="碑" # "\ufa4b" # $
SPACESHIP_GIT_STATUS_UNMERGED="שּׁ " # "\ufb2c " # =
SPACESHIP_GIT_STATUS_AHEAD=" " # "\uf55c " # ⇡
SPACESHIP_GIT_STATUS_BEHIND=" " # "\uf544 " # ⇣
SPACESHIP_GIT_STATUS_DIVERGED=" " # "\uf5fa " # ⇕

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# ZSH_THEME="geoffgarside"
ZSH_THEME="spaceship"

SPACESHIP_PROMPT_ORDER=(
  time          # Time stampts section
  user          # Username section
  dir           # Current directory section
  host          # Hostname section
  git           # Git section (git_branch + git_status)
  # hg            # Mercurial section (hg_branch  + hg_status)
  # package       # Package version
  node          # Node.js section
  ruby          # Ruby section
  # elixir        # Elixir section
  # xcode         # Xcode section
  # swift         # Swift section
  # golang        # Go section
  php           # PHP section
  # rust          # Rust section
  # haskell       # Haskell Stack section
  # julia         # Julia section
  docker        # Docker section
  # aws           # Amazon Web Services section
  venv          # virtualenv section
  # conda         # conda virtualenv section
  pyenv         # Pyenv section
  # dotnet        # .NET section
  # ember         # Ember.js section
  # kubecontext   # Kubectl context section
  exec_time     # Execution time
  line_sep      # Line break
  battery       # Battery level and status
  vi_mode       # Vi-mode indicator
  jobs          # Background jobs indicator
  exit_code     # Exit code section
  char          # Prompt character
)

# Adds a newline character before each prompt line<Paste>
SPACESHIP_PROMPT_ADD_NEWLINE="true"

# Make the prompt span across two lines
SPACESHIP_PROMPT_SEPARATE_LINE="true"

# Prompt character to be shown before any command
SPACESHIP_CHAR_SYMBOL=" " #   ﲵ ➜  ﯅  ﮊ  ﮏ    

# Show time
SPACESHIP_TIME_SHOW="true"

SPACESHIP_PROMPT_DEFAULT_PREFIX=""
SPACESHIP_PROMPT_PREFIXES_SHOW=false

# more options at
# https://github.com/denysdovhan/spaceship-prompt/blob/master/docs/Options.md



# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git git-flow sublime osx common-aliases fasd httpie history tmux add-zsh-hook fzf base16-vim)


source $ZSH/oh-my-zsh.sh


# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Aliases
# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.




# display how long all tasks over 10 seconds take
export REPORTTIME=10

[[ -e ~/.terminfo ]] && export TERMINFO_DIRS=~/.terminfo:/usr/share/terminfo

# define the code directory
# This is where my code exists and where I want the `c` autocomplete to work from exclusively
if [[ -d ~/Code ]]; then
    export CODE_DIR=~/Code
fi

# source all .zsh files inside of the zsh/ directory
for config ($DOTFILES/zsh/settings/**/*.zsh) source $config

if [[ -a ~/.localrc ]]; then
    source ~/.localrc
fi

# initialize autocomplete
autoload -U compinit add-zsh-hook
compinit

for config ($DOTFILES/zsh/settings/**/*completion.sh) source $config

export VISUAL='vim'

export EDITOR='vim'
export GIT_EDITOR='vim'

export PATH=/usr/local/bin:$PATH

# add /usr/local/sbin
if [[ -d /usr/local/sbin ]]; then
    export PATH=/usr/local/sbin:$PATH
fi

# adding path directory for custom scripts
export PATH=$DOTFILES/bin:$PATH

# check for custom bin directory and add to path
if [[ -d ~/.composer/vendor/bin ]]; then
    export PATH=~/.composer/vendor/bin:$PATH
fi

# check for custom bin directory and add to path
if [[ -d /usr/local/Cellar/python@2 ]]; then
    python2_dir=$(find /usr/local/Cellar/python@2 -maxdepth 1 -type d -name '2.*' -print | head -n1)
    if [[ -d $python2_dir/bin ]]; then
        export PATH=$python2_dir/bin:$PATH
    fi
fi

# add .nvm to path if folder exists
if [[ -d ~/.nvm ]]; then
    export PATH=~/.nvm:$PATH
    export NVM_DIR="$HOME/.nvm"

    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# check for custom bin directory and add to path
if [[ -d ~/bin ]]; then
    export PATH=~/bin:$PATH
fi

if [[ -z "$TMUX" ]]; then
    export TERM=xterm-256color-italic
fi

# install rbenv
if command_exists rbenv; then
    rval "$(rbenv init -)"
fi

if [[ -d ~/.rvm ]]; then
    PATH=$HOME/.rvm/bin:$PATH # Add RVM to PATH for scripting
    source ~/.rvm/scripts/rvm
fi

# alias git to hub
if command_exists hub; then
    eval "$(hub alias -s)"
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Base16 shell setup
BASE16_SHELL=$HOME/.config/base16-shell/
[ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"

# source nvm
export NVM_DIR=~/.nvm

load-nvmrc() {
    if [[ -f .nvmrc && -r .nvmrc ]]; then
        nvm use
    fi
}
load-nvmrc

if hash brew 2>/dev/null; then
    source $(brew --prefix nvm)/nvm.sh
    source `brew --prefix`/etc/profile.d/z.sh
    # when sourcing, check and ensure that the correct Node version is set
    load-nvmrc
fi


export PATH="$HOME/.yarn/bin:$PATH"

# if [[ -d $(brew --prefix homebrew/php/php71)/bin ]]; then
#     export PATH="$(brew --prefix homebrew/php/php71)/bin:$PATH"
# elif [[ -d $(brew --prefix homebrew/php/php70)/bin ]]; then
#     export PATH="$(brew --prefix homebrew/php/php70)/bin:$PATH"
# fi

export FZF_DEFAULT_COMMAND='if [ -f cscope.files ]; then cat cscope.files; else find ./ -type f ; fi'

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

